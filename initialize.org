* Utility functions
Add the same hook to several modes.
#+BEGIN_SRC emacs-lisp
  (defun wk/add-hook-to-many (function hooks)
    (mapc (lambda (hook)
            (add-hook hook function))
          hooks))
#+END_SRC
* Load customized variables
#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
  (load custom-file)
#+END_SRC
* Theme
Load my custom theme.
#+BEGIN_SRC emacs-lisp
  (load-theme 'wk t)
#+END_SRC
* Package manager
** Repositories
#+BEGIN_SRC emacs-lisp
  (setq package-archives
        '(("org" .
           "http://orgmode.org/elpa/")
          ("marmalade" .
           "http://marmalade-repo.org/packages/")
          ("gnu" .
           "http://elpa.gnu.org/packages/")
          ("melpa" .
           "http://melpa.milkbox.net/packages/")
          ("sunrise commander" .
           "http://joseito.republika.pl/sunrise-commander/")))
#+END_SRC
** Packages
Load packages if they are not already installed.
#+BEGIN_SRC emacs-lisp
  (setq package-list
   '(async
     auctex
     auto-complete
     cdlatex
     column-marker
     dash
     diff-hl
     dired+
     font-utils
     fringe-helper
     git-commit-mode
     git-rebase-mode
     gnuplot
     gnuplot-mode
     haskell-mode
     helm
     hindent
     hl-line+
     list-utils
     magit
     mmm-mode
     multiple-cursors
     org
     org-plus-contrib
     paredit
     pcache
     persistent-soft
     php+-mode
     php-mode
     popup
     powershell
     rainbow-mode
     shm
     smart-compile
     smart-tabs-mode
     smartparens
     sr-speedbar
     tabbar
     typopunct
     ucs-utils
     undo-tree
     unicode-fonts
     vlf
     yaml-mode
     yasnippet))

  (let (packages-not-refreshed)
      (dolist (package package-list)
        (unless (package-installed-p package)
          (progn
            (if (packages-not-refreshed)
                (progn
                  (setq packages-not-refreshed t)
                  (package-refresh-contents)))
            (package-install package)))))
#+END_SRC
* Backup files
Store backup files in [[~/.emacs-backups]]
#+BEGIN_SRC emacs-lisp
  (setq
   backup-by-copying t
   backup-directory-alist '(("." . "~/.emacs-backups")))
#+END_SRC
* Line numbering
Format line numbers based on the length of the buffer so that we can right-align them.
#+BEGIN_SRC emacs-lisp
  (add-hook 'linum-before-numbering-hook
          (lambda ()
            (setq-local linum-format-fmt
                (let ((w (length (number-to-string
                          (count-lines (point-min) (point-max))))))
                  (concat " %" (number-to-string w) "d ")))))

  (defun linum-format-func (line)
    (concat
     (propertize (format linum-format-fmt line) 'face 'linum)))

  (setq linum-format 'linum-format-func)
#+END_SRC

Enable line numbering in most major modes, excluding those in ~linum-disabled-modes-list~.
#+BEGIN_SRC emacs-lisp
  (setq linum-disabled-modes-list
    '(eshell-mode
      term-mode
      shell-mode
      speedbar-mode
      compilation-mode
      org-mode
      text-mode
      dired-mode))

  (add-hook 'after-change-major-mode-hook
      '(lambda ()
         (if
             (or
                  (minibufferp) ; We don't want line numbers in the minibuffer
                  (member major-mode linum-disabled-modes-list))
             (progn
               (linum-mode -1)
               (setq left-margin-width 1)) ; Add a small margin if there is no
                                           ; line numbering
             (linum-mode t))))
#+END_SRC
* Highlight the current line
Only highlight the current line when idle.
#+BEGIN_SRC emacs-lisp
  (toggle-hl-line-when-idle t)
#+END_SRC

Make hl-line work when visual-line-mode is enabled.
#+BEGIN_SRC emacs-lisp
  ; Set the highlighted range based on what the current mode considers a
  ; "vertical motion", rather than the true line.
  (defun visual-line-line-range ()
    (save-excursion (cons (progn
                            (vertical-motion 0)
                            (point))
                          (progn
                            (vertical-motion 1)
                            (point)))))

  (setq hl-line-range-function 'visual-line-line-range)
#+END_SRC
* Make =TAB= insert a literal tab in fundamental mode
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "TAB") 'self-insert-command)
#+END_SRC
* Display formatting
** Set the tab width to 4 spaces
#+BEGIN_SRC emacs-lisp
  (setq default-tab-width 4)
#+END_SRC
** Set the default line width to 80 characters
#+BEGIN_SRC emacs-lisp
  (setq-default fill-column 80)
#+END_SRC
* Hide the welcome screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
* Overwrite the mark when editing
When typing or yanking with text marked, replace the marked text instead of
inserting after the mark.
#+BEGIN_SRC emacs-lisp
  (delete-selection-mode t)
#+END_SRC
* Remap =RET= to indent automatically in most modes
Make the =RET= key go to a new line and auto-indent.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "RET") 'newline-and-indent)
#+END_SRC
* Toggle frame transparency with =C-c t=
#+BEGIN_SRC emacs-lisp
  (set-frame-parameter (selected-frame) 'alpha '(100 100))
  (add-to-list 'default-frame-alist '(alpha 100 100))

  (defun wk/toggle-transparency ()
    (interactive)
    (if (/=
         (cadr (frame-parameter nil 'alpha))
         100)
        (set-frame-parameter nil 'alpha '(100 100))
        (set-frame-parameter nil 'alpha '(85 50))))

  (global-set-key (kbd "C-c t") 'wk/toggle-transparency)
#+END_SRC
* Org mode
** General options
Use indented display.
#+BEGIN_SRC emacs-lisp
  (setq org-startup-indented t)
#+END_SRC

Allow mouse interaction.
#+BEGIN_SRC emacs-lisp
  (require 'org-mouse)
#+END_SRC
** Todo options
Add a MOOT option in addition to DONE for tasks which have become irrelevant.
#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO" "|" "DONE" "MOOT")))
#+END_SRC
** Babel
Highlight source code in the org buffer.
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
#+END_SRC
** Agenda
Add =C-c a= as a global key binding for the agenda.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC

Add files to the default agenda.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-agenda-files "~/documents/schedule/")
#+END_SRC
* AucTeX
Enable parsing and saving parsing information.
#+BEGIN_SRC emacs-lisp
  (setq TeX-parse-self t)
  (setq TeX-auto-save t)
#+END_SRC

Rebind RET to indent automatically.
#+BEGIN_SRC emacs-lisp
  (add-hook 'tex-mode-hook (lambda () (local-set-key (kbd "RET") 'reindent-then-newline-and-indent)))
#+END_SRC
* Quick config file access
Use =M-x edit-init-file= to edit this file.
#+BEGIN_SRC emacs-lisp
  (defun edit-init-file ()
    "Edit init.org in another window."
    (interactive)
    (find-file-other-window
     (concat user-emacs-directory "initialize.org")))
#+END_SRC

Use =M-x edit-theme-file= to edit wk-theme.el, which is my custom theme.
#+BEGIN_SRC emacs-lisp
  (defun edit-theme-file ()
      "Edit wk-theme.el in another window."
      (interactive)
      (find-file-other-window
       (concat user-emacs-directory "wk-theme.el")))
#+END_SRC
* Frame title
Put current file and modified status in the frame title.
#+BEGIN_SRC emacs-lisp
  (setq frame-title-format "%b [%+]")
#+END_SRC
* Speedbar
Use SrSpeedbar to keep the speedbar as a left window in the main emacs frame.

Enable and sr-speedbar.
#+BEGIN_SRC emacs-lisp
  (require 'sr-speedbar)
  (setq speedbar-show-unknown-files t
        sr-speedbar-right-side nil
        sr-speedbar-skip-other-window-p t)
#+END_SRC

Disable images for speedbar.
#+BEGIN_SRC emacs-lisp
  (setq speedbar-use-images nil)
#+END_SRC
* Disable GUI widgets
#+BEGIN_SRC emacs-lisp
  (scroll-bar-mode -1)
  (tool-bar-mode -1)
#+END_SRC
* Cursor
Use a bar as a cursor instead of a box.
#+BEGIN_SRC emacs-lisp
  (setq-default cursor-type 'bar)
#+END_SRC
* Highlight fill column
Mark the fill column with a red box in programming modes.
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook '(lambda () (column-marker-1 fill-column)))
#+END_SRC
* Smartparens
Set up smartparens and configure it to work like paredit.
#+BEGIN_SRC emacs-lisp
  (require 'smartparens-config) ; Setup standard configuration
  (sp-use-paredit-bindings) ; Use keybindings that are like paredit

  (add-hook 'smartparens-mode-hook
            '(lambda ()
               (setq ; Skip over closing delimiters instead of adding new ones
                     sp-autoskip-closing-pair 'always

                     ; Only kill forwards when using C-k
                     sp-hybrid-kill-entire-symbol nil)))

  (smartparens-global-mode)
  (show-smartparens-global-mode)
#+END_SRC

Turn on strict mode when editing lisp.
#+BEGIN_SRC emacs-lisp
  (wk/add-hook-to-many
   '(lambda () (smartparens-strict-mode t))
   '(emacs-lisp-mode-hook
     eval-expression-minibuffer-setup-hook
     ielm-mode-hook
     lisp-mode-hook
     lisp-interaction-mode-hook
     scheme-mode-hook))
#+END_SRC
* Shell
Set shell behavior to be more natural.
#+BEGIN_SRC emacs-lisp
  (setq comint-scroll-to-bottom-on-input t
        comint-scroll-to-bottom-on-output t
        comint-scroll-show-maximum-output t
        comint-input-ignoredups t ; Ignore duplicate commands in history
        comint-completion-addsuffix t ; Add "/" or " " after autocompletion of
                                      ; directory and file names
        comint-buffer-maximum-size 20000 ; Increase the maximum buffer size
        comint-input-ring-size 5000) ; Increase the maximum history size

  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+END_SRC
* Trailing whitespace
#+BEGIN_SRC emacs-lisp
  (setq-default show-trailing-whitespace t)
#+END_SRC
* Dired
Reuse the same buffer for dired instead of making a new one each time we change locations.
#+BEGIN_SRC emacs-lisp
  (toggle-diredp-find-file-reuse-dir 1)
#+END_SRC

Hide dotfiles in dired by default.
#+BEGIN_SRC emacs-lisp
  (setq dired-omit-files
        (concat "^\\..*$"))
  (add-hook 'dired-mode-hook '(lambda () (setq dired-omit-mode t)))
#+END_SRC
* Undo/redo
Use undo-tree to manage undo/redo.
#+BEGIN_SRC emacs-lisp
  (global-undo-tree-mode 1)
#+END_SRC

Set =C-z= to undo and =C-S-z= to redo, rather than =C-x u=.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-z") 'undo)
  (global-set-key (kbd "C-S-z") 'undo-tree-redo)
#+END_SRC
* Line wrapping
Enable line wrapping in some modes.
#+BEGIN_SRC emacs-lisp
  (wk/add-hook-to-many
   (lambda () (visual-line-mode t))
   '(org-mode-hook
     text-mode-hook))
#+END_SRC
* Spellcheck
Enable spell-checking in some modes.
#+BEGIN_SRC emacs-lisp
  (wk/add-hook-to-many
   (lambda () (flyspell-mode t))
   '(org-mode-hook
     text-mode-hook))
#+END_SRC
* Typographical punctuation
Set up typopunct mode, which enable smart quotes and other unicode typographical punctuation.
#+BEGIN_SRC emacs-lisp
  (require 'typopunct)
  (typopunct-change-language 'english t)
#+END_SRC
* Haskell mode
Use structured-haskell-mode to indent haskell.
#+BEGIN_SRC emacs-lisp
  (add-hook 'haskell-mode-hook 'structured-haskell-mode)
#+END_SRC
* HTML5 in nXML mode
Validate HTML5 in nXML mode when the appropriate xmlns is provided.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path "~/.emacs.d/html5-el/")

  (eval-after-load "rng-loc"
    '(add-to-list 'rng-schema-locating-files "~/.emacs.d/html5-el/schemas.xml"))

  (require 'whattf-dt)
#+END_SRC
* Show column numbers
#+BEGIN_SRC emacs-lisp
  (column-number-mode t)
#+END_SRC
* Set fringes
#+BEGIN_SRC emacs-lisp
  (fringe-mode '(0 . 10))
#+END_SRC
* Show up/down arrows in the fringe
#+BEGIN_SRC emacs-lisp
  (setq-default indicate-buffer-boundaries '((t) (up . right) (down . right)))
#+END_SRC
* Helm
Enable helm and set useful keybindings.
#+BEGIN_SRC emacs-lisp
  (require 'helm)
  (require 'helm-config)
  (helm-autoresize-mode t)

  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)
#+END_SRC
* YASnippet
Enable YASnippet everywhere.
#+BEGIN_SRC emacs-lisp
  (yas-global-mode 1)
#+END_SRC
* GDB
Use the multi-window layout for GDB.
#+BEGIN_SRC emacs-lisp
  (setq gdb-many-windows t)
#+END_SRC
